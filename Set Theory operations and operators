/*
 * iset64.h
 *
 *  Created on: Sep 8, 2014
 *      Author: Ronald Inselberg
 */

#if 0

README.txt

Using a 64-bit Mac with Eclipse IDE for C/C++ Developers (freeware)

Unable to use Automatic Memory Leak Detection (Eclipse fails with error msg "Couldn't determine version of Valgrind")

This is a merge of the working files :

1. Set Theory class declaration file, iset64.h
2. Set Theory class definition file, iset64.cpp
3. Externally provided test program file, iset64test.cpp
4. Test Program Build Data and Test Program Output Data, appended after iset64test.cpp


My implementation uses a fixed bit map representation for every object instantiated from the iset64 class.

The bit map needs to be at least 64 bits, to represent every one of the permissible set elements, from 0 to 63.

I use a class member variable of type long (_set), because this provides 8 bytes (64 bits) for bitwise operations.

My code is likely compiler dependent, because it requires that sizeof(long) >= 8 and I would like to have an assert
statement for this, but I do not see where that would fit, except in the test program, and I did not want to vary from
the assignment by changing the test program that was provided.

I used a static class member array variable _el[64] to store the bit representations for the permissible set elements.

The array is initialized with a preprocessor defined macro EL(N) that translates into a bitwise left shift operation
that shifts the base value of 1 by N bit positions to the left, followed by 0s.

EL(0) creates the bit representation for 0, of unsigned value 1, which is stored in the base or first array element.

EL(1) creates the bit representation for 1, of unsigned value 2, which is stored in the second array element.

EL(2) creates the bit representation for 2, of unsigned value 4, which is stored in the third array element, etc.

EL(63) . . . for 63, of unsigned value 2**63, which is stored in the last array element (at index 63).

#endif


/*----------------------------------------------------------------
iset64 class declaration
-----------------------------------------------------------------*/
#ifndef ISET64_H_
#define ISET64_H_

/*----------------------------------------------------------------
only permissible external include file
-----------------------------------------------------------------*/
#include "../../objects/util/util.h"

class iset64 {

public:
	static void set_verbose(bool verbose) {_verbose = verbose;};
	iset64();
	iset64(const int[], const int);
	virtual ~iset64();
	iset64(const iset64&);
	iset64& operator=(const iset64&);
	friend ostream& operator<<(ostream&, const iset64&);
	friend bool operator==(const iset64&, const iset64&);
	friend bool operator!=(const iset64&, const iset64&);
	friend iset64 operator+(const iset64&, const int);
	friend iset64 operator+(const int, const iset64&);
	friend iset64 operator+(const iset64&, const iset64&);
	friend iset64 operator-(const iset64&, const int);
	friend iset64 operator-(const int, const iset64&);
	friend iset64 operator-(const iset64&, const iset64&);
	friend iset64 operator*(const iset64&, const int);
	friend iset64 operator*(const int, const iset64&);
	friend iset64 operator*(const iset64&, const iset64&);
	friend iset64& operator+=(iset64&, const int);
	friend iset64& operator+=(iset64&, const iset64&);
	friend iset64& operator-=(iset64&, const int);
	friend iset64& operator-=(iset64&, const iset64&);
	friend iset64& operator*=(iset64&, const int);
	friend iset64& operator*=(iset64&, const iset64&);

protected:
	virtual ostream& _print(ostream&) const;
	void _copy(const iset64&);
	static bool _verbose;
	static long _el[64];
	long _set;

};


#endif /* ISET64_H_ */

//EOF



/*
 * iset64.cpp
 *
 *  Created on: Sep 8, 2014
 *      Author: Ronald Inselberg
 */

/* class definition depends on class declaration from header file */
#include "iset64.h"

/*----------------------------------------------------------------
static members are initialized
-----------------------------------------------------------------*/

/* change false to true as needed for debug requirements */
bool iset64::_verbose = false;

/* left shift base value of 1 by N bit positions and fill with 0s */
#define EL(N) long(1) << N

/* intialize and store the bit map representations for all permissible set elements from 0 to 63 */
long iset64::_el[] = {
		EL(0), EL(1), EL(2), EL(3), EL(4), EL(5), EL(6), EL(7), EL(8), EL(9),
		EL(10), EL(11), EL(12), EL(13), EL(14), EL(15), EL(16), EL(17), EL(18), EL(19),
		EL(20), EL(21), EL(22), EL(23), EL(24), EL(25), EL(26), EL(27), EL(28), EL(29),
		EL(30), EL(31), EL(32), EL(33), EL(34), EL(35), EL(36), EL(37), EL(38), EL(39),
		EL(40), EL(41), EL(42), EL(43), EL(44), EL(45), EL(46), EL(47), EL(48), EL(49),
		EL(50), EL(51), EL(52), EL(53), EL(54), EL(55), EL(56), EL(57), EL(58), EL(59),
		EL(60), EL(61), EL(62), EL(63)
};

/*----------------------------------------------------------------
constructors
-----------------------------------------------------------------*/
iset64::iset64():_set(0) {
	if (_verbose) {
		cout << "iset64, constructor()" << endl;
	}
}

iset64::iset64(const int array[], const int number) {
	if (_verbose) {
		cout << "iset64, constructor(int[], int))" << endl;
	}
	_set = 0;
	for (int i = 0; i < number; ++i) {
		_set = _set | _el[ (array[i] % 64) ];
	}
}

/*----------------------------------------------------------------
destructor
-----------------------------------------------------------------*/
iset64::~iset64() {
	if (_verbose) {
		cout << "iset64, destructor()" << endl;
	}
}

/*----------------------------------------------------------------
copy constructor
-----------------------------------------------------------------*/
iset64::iset64(const iset64& rhs) {
	if (_verbose) {
		cout << "iset64, copy constructor" << endl;
	}
	_copy(rhs);
}
void iset64::_copy(const iset64& rhs) {
	_set = rhs._set;
}

/*----------------------------------------------------------------
overloaded assignment operator
-----------------------------------------------------------------*/
iset64& iset64::operator=(const iset64& rhs) {
	if (_verbose) {
		cout << "iset64, assignment operator" << endl;
	}
	if (this != &rhs) {
		_copy(rhs);
	}
	return *this;
}

/*----------------------------------------------------------------
overloaded print operator
-----------------------------------------------------------------*/
ostream& operator<<(ostream& o, const iset64& x) {
	x._print(o);
	return o;
}
/*----------------------------------------------------------------
empty set is printed as { }
set elements are printed in ascending numerical order and delimited with trailing ", "
{ 4 }  { 2, 37 }  { 9, 29, 50 }  { 0, 1, 2, ..., 63 }  etc.
-----------------------------------------------------------------*/
ostream& iset64::_print(ostream& o) const {
	if (_set == 0) {
		o << "{ }";
	} else {
		int number = 0;
		int i;
		for (i = 0; i < 64; ++i) {
			if (this->_set & _el[i]) {
				++number;
			}
		}
		assert((1 <= number) && (number <= 64));
		o << "{ ";
		int numberTest = 0;
		for (i = 0; i < 64; ++i) {
			if (this->_set & _el[i]) {
				++numberTest;
				if (numberTest < number) {
					o << i << ", ";
				} else {
					o << i << " }";
					break;

				}
			}
		}
	}
	return o;
}

/*----------------------------------------------------------------
overloaded == and != operator
-----------------------------------------------------------------*/
bool operator==(const iset64& op1, const iset64& op2) {
	return (op1._set == op2._set);
}
bool operator!=(const iset64& op1, const iset64& op2) {
	return (op1._set != op2._set);
}

/*----------------------------------------------------------------
overloaded + operator implements set union
-----------------------------------------------------------------*/
iset64 operator+(const iset64& op1, const int op2) {
	iset64 result(op1);
	result._set = result._set | iset64::_el[ op2 % 64 ];
	return result;
}
iset64 operator+(const int op1, const iset64& op2) {
	iset64 result(op2);
	result._set = result._set | iset64::_el[ op1 % 64 ];
	return result;
}
iset64 operator+(const iset64& op1, const iset64& op2) {
	iset64 result(op1);
	result._set = result._set | op2._set;
	return result;
}

/*----------------------------------------------------------------
overloaded - operator implements set difference
-----------------------------------------------------------------*/
iset64 operator-(const iset64& op1, const int op2) {
	iset64 result(op1);
	result._set = result._set & ~iset64::_el[ op2 % 64 ];
	return result;
}
iset64 operator-(const int op1, const iset64& op2) {
	iset64 result;
	result._set = iset64::_el[ op1 % 64] & ~op2._set;
	return result;
}
iset64 operator-(const iset64& op1, const iset64& op2) {
	iset64 result(op1);
	result._set = result._set & ~op2._set;
	return result;
}

/*----------------------------------------------------------------
overloaded * operator implements set intersection
-----------------------------------------------------------------*/
iset64 operator*(const iset64& op1, const int op2) {
	iset64 result(op1);
	result._set = result._set & iset64::_el[ op2 % 64 ];
	return result;
}
iset64 operator*(const int op1, const iset64& op2) {
	iset64 result(op2);
	result._set = result._set & iset64::_el[ op1 % 64 ];
	return result;
}
iset64 operator*(const iset64& op1, const iset64& op2) {
	iset64 result(op1);
	result._set = result._set & op2._set;
	return result;
}

/*----------------------------------------------------------------
overloaded += operator implements set union and assign
-----------------------------------------------------------------*/
iset64& operator+=(iset64& op1, const int op2) {
	op1._set = op1._set | iset64::_el[ op2 % 64];
	return op1;
}
iset64& operator+=(iset64& op1, const iset64& op2) {
	op1._set = op1._set | op2._set;
	return op1;
}

/*----------------------------------------------------------------
overloaded -= operator implements set difference and assign
-----------------------------------------------------------------*/
iset64& operator-=(iset64& op1, const int op2) {
	op1._set = op1._set & ~iset64::_el[ op2 % 64 ];
	return op1;
}
iset64& operator-=(iset64& op1, const iset64& op2) {
	op1._set = op1._set & ~op2._set;
	return op1;
}

/*----------------------------------------------------------------
overloaded *= operator implements set intersection and assign
-----------------------------------------------------------------*/
iset64& operator*=(iset64& op1, const int op2) {
	op1._set = op1._set & iset64::_el[ op2 % 64];
	return op1;
}
iset64& operator*=(iset64& op1, const iset64& op2) {
	op1._set = op1._set & op2._set;
	return op1;
}

//EOF




/*----------------------------------------------------------------

EXTERNALLY PROVIDED TEST PROGRAM

Copyright (c) 2013 Author: Jagadeesh Vasudevamurthy
file: iset64test.cpp

On linux:
g++ iset64.cpp iset64test.cpp
valgrind a.out

-----------------------------------------------------------------*/

/*----------------------------------------------------------------
This file test iset64 object
-----------------------------------------------------------------*/

/*----------------------------------------------------------------
All includes here
-----------------------------------------------------------------*/
#include "iset64.h"

/*----------------------------------------------------------------
test a set
-----------------------------------------------------------------*/
void test_basic() {
  iset64 a;
  cout << "a = " << a << endl;
  a = a + 5;
  cout << "set a after adding 5 = " << a << endl;
  a = a + 5;
  cout << "set a after adding 5 = " << a << endl;
  a += 63;
  a += 0;
  cout << "set a after adding 0 and 63 = " << a << endl;
  int x[] = { 1, 3, 6 };
  iset64 b(x, sizeof(x) / sizeof(int));
  cout << "set b = " << b << endl;
  b = b - 3;
  cout << "set b after removing 3 = " << b << endl;
  b = b - 3;
  cout << "set b after removing 3 = " << b << endl;
  b = b - 10;
  cout << "set b after removing 10 = " << b << endl;
  b = b - 6;
  cout << "set b after removing 6 = " << b << endl;
  b = b - 1;
  cout << "set b after removing 1 = " << b << endl;
  b = b + 10;
  b = b + 2;
  cout << "set b after adding {10,2} = " << b << endl;
}

/*----------------------------------------------------------------
test union
-----------------------------------------------------------------*/
void test_union() {
  {
    cout << "TESTING: iset64 operator+(const iset64& a, const iset64& b)" << endl;
    iset64 a;
    a += 1;
    a += 2;
    iset64 b;
    b += 1;
    b += 2;
    b += 3;
    cout << "Set a " << a << endl;
    cout << "Set b " << b << endl;
    iset64 c = a + b;
    cout << "a + b = " << c << endl;
  }
  {
    cout << "TESTING:iset64 operator+(const iset64& a, const int b)" << endl;
    iset64 a;
    a += 1;
    a += 2;
    cout << a << endl;
    a = a + 1;
    cout << "{1,2} + 1 = " << a << endl;
    a += 1;
    a += 2;
    cout << a << endl;
    a = a + 3;
    cout << "{1,2} + 3 = " << a << endl;
  }
  {
    cout << "TESTING:iset64 operator+(const int b, const iset64& a)" << endl;
    iset64 a;
    a += 1;
    a += 2;
    cout << "Set a " << a << endl;
    a = 1 + a;
    cout << " 1 + {1,2} = " << a << endl;
    a += 1;
    a += 2;
    cout << "Set a " << a << endl;
    a = 3 + a;
    cout << " 3 + {1,2}  = " << a << endl;
  }

  {
    cout << "TESTING:iset64& iset64::operator+=(const iset64& a)" << endl;
    iset64  b;
    b += 1;
    b += 2;
    iset64 a;
    a += 1;
    a += 3;
    cout << "Set b " << b << endl;
    cout << "Set a " << a << endl;
    b += a;
    cout << " {1,2} + {1,3}  = " << b << endl;
  }
  {
    cout << "iset64& iset64::operator+=(const int b)" << endl;
    iset64 a;
    a += 1;
    a += 2;
    cout << "Set a " << a << endl;
    a += 3;
    cout << " {1,2} + 3  = " << a << endl;
  }
  {
    //test chaining
    iset64 a;
    a += 1;
    a += 2;
    iset64 b;
    b += 3;
    b += 4;
    iset64 c;
    c += 7;
    c += 8;
    iset64 d = a + b + c + 5;
    cout << "Set a " << a << endl;
    cout << "Set b " << b << endl;
    cout << "Set c " << c << endl;
    cout << "Set d " << d << endl;
  }
}

/*----------------------------------------------------------------
test difference
-----------------------------------------------------------------*/
void test_difference() {
  {
    cout << "TESTING: iset64 operator-(const iset64& a, const iset64& b)" << endl;
    iset64 a;
    a += 1;
    a += 2;
    iset64 b;
    b += 1;
    b += 2;
    iset64 c = a - b;
    cout << "Set a " << a << endl;
    cout << "Set b " << a << endl;
    cout << "a - b = " << c << endl;
  }
  {
    cout << "TESTING: iset64 operator-(const iset64& a, const iset64& b)" << endl;
    iset64 a;
    a += 1;
    a += 5;
    iset64 b;
    b += 1;
    b += 2;
    b += 3;
    iset64 c = a - b;
    cout << "Set a " << a << endl;
    cout << "Set b " << b << endl;
    cout << "a - b = " << c << endl;
  }

  {
    cout << "TESTING: iset64 operator-(const iset64& a, const int b)" << endl;
    iset64 a;
    a += 1;
    a += 2;
    cout << "Set a " << a << endl;
    a = a - 3;
    cout << "a - 3 = " << a << endl;
  }

  {
    cout << "TESTING: iset64 operator-(const int b, const iset64& a)" << endl;
    iset64 a;
    a += 1;
    a += 2;
    cout << "Set a " << a << endl;
    a = 3 - a;
    cout << "3 - a = " << a << endl;
  }

  {
    cout << "TESTING: iset64& iset64::operator-=(const iset64& a)" << endl;
    iset64 a;
    a += 1;
    a += 3;
    iset64 b;
    b += 1;
    b += 2;
    cout << "Set a " << a << endl;
    cout << "Set b " << b << endl;
    b -= a;
    cout << "b -= a = " << b << endl;
  }

  {
    cout << "TESTING: iset64& iset64::operator-=(const int b)" << endl;
    iset64 a;
    a += 1;
    a += 2;
    cout << "Set a " << a << endl;
    a -= 3;
    cout << "a -= 3 = " << a << endl;
  }
  {
    //test chaining
    iset64 a;
    a += 1;
    a += 2;
    iset64 b;
    b += 2;
    b += 4;
    iset64 c;
    c += 2;
    c += 8;
    iset64 d = a - b - c + 5;
    cout << "Set a " << a << endl;
    cout << "Set b " << b << endl;
    cout << "Set c " << c << endl;
    cout << "Set d " << d << endl;
  }
}

/*----------------------------------------------------------------
test intersection
-----------------------------------------------------------------*/
void test_intersection() {
  {
    cout << "TESTING: iset64 operator*(const iset64& a, const iset64& b)" << endl;
    iset64 a;
    a += 1;
    a += 2;
    iset64 b;
    b += 1;
    b += 2;
    b += 3;
    cout << "Set a " << a << endl;
    cout << "Set b " << b << endl;
    iset64 c = a * b;
    cout << "a * b = " << c << endl;
  }
  {
    cout << "TESTING:iset64 operator*(const iset64& a, const int b)" << endl;
    iset64 a;
    a += 1;
    a += 2;
    cout << "Set a " << a << endl;
    a = a * 1;
    cout << "{1,2} * 1 = " << a << endl;
    a += 1;
    a += 2;
    cout << "Set a " << a << endl;
    a = a * 3;
    cout << "{1,2} * 3 = " << a << endl;
  }
  {
    cout << "TESTING:iset64 operator*(const int b, const iset64& a)" << endl;
    iset64 a;
    a += 1;
    a += 2;
    cout << "Set a " << a << endl;
    a = 1 * a;
    cout << " 1 * {1,2} = " << a << endl;
    a += 1;
    a += 2;
    cout << "Set a " << a << endl;
    a = 3 * a;
    cout << " 3 * {1,2}  = " << a << endl;
  }

  {
    cout << "TESTING:iset64& iset64::operator*=(const iset64& a)" << endl;
    iset64 b;
    b += 1;
    b += 2;
    iset64 a;
    a += 1;
    a += 3;
    cout << "Set b " << b << endl;
    cout << "Set a " << a << endl;
    b *= a;
    cout << " {1,2} * {1,3}  = " << b << endl;
  }
  {
    cout << "iset64& iset64::operator*=(const int b)" << endl;
    iset64 a;
    a += 1;
    a += 2;
    cout << "Set a " << a << endl;
    a *= 3;
    cout << " {1,2} * 3  = " << a << endl;
  }
  {
    //test chaining
    iset64 a;
    a += 1;
    a += 2;
    iset64 b;
    b += 2;
    b += 4;
    iset64 c;
    c += 2;
    c += 8;
    iset64 d = a * b * c + 5;
    cout << "Set a " << a << endl;
    cout << "Set b " << b << endl;
    cout << "Set c " << c << endl;
    cout << "Set d " << d << endl;
  }
}


/*----------------------------------------------------------------
test equal
-----------------------------------------------------------------*/
void test_equal_not_equal() {
  {
    cout << "TESTING: bool operator==(const iset64& a, const iset64& b)" << endl;
    iset64 a;
    a += 1;
    a += 2;
    iset64 b;
    b += 1;
    b += 2;
    cout << "Set a " << a << endl;
    cout << "Set b " << b << endl;
    cout << "a == b " << boolalpha << (a == b) << endl;
    b -= 1;
    cout << a;
    cout << b;
    cout << "a == b " << boolalpha << (a == b) << endl;
  }
  {
    cout << "TESTING: bool operator!=(const iset64& a, const iset64& b)" << endl;
    iset64 a;
    a += 1;
    a += 2;
    iset64 b;
    b += 1;
    b += 2;
    cout << "Set a " << a << endl;
    cout << "Set b " << b << endl;
    cout << "a != b " << boolalpha << (a != b) << endl;
    b -= 1;
    cout << "Set a " << a << endl;
    cout << "Set b " << b << endl;
    cout << "a != b " << boolalpha << (a != b) << endl;
  }
}


/*----------------------------------------------------------------
test bed
-----------------------------------------------------------------*/
void testbed() {
  test_basic();
  test_union();
  test_difference();
  test_intersection();
  test_equal_not_equal();
}

/*----------------------------------------------------------------
main
-----------------------------------------------------------------*/
int main() {
  testbed();
  return 0;
}




#if 0


TEST PROGRAM BUILD

14:41:28 **** Build of configuration Debug for project iset64 ****
make all
Building file: ../sourceFiles/iset64.cpp
Invoking: GCC C++ Compiler
g++ -O0 -g3 -Wall -c -fmessage-length=0 -MMD -MP -MF"sourceFiles/iset64.d" -MT"sourceFiles/iset64.d" -o "sourceFiles/iset64.o" "../sourceFiles/iset64.cpp"
Finished building: ../sourceFiles/iset64.cpp

Building file: ../sourceFiles/iset64test.cpp
Invoking: GCC C++ Compiler
g++ -O0 -g3 -Wall -c -fmessage-length=0 -MMD -MP -MF"sourceFiles/iset64test.d" -MT"sourceFiles/iset64test.d" -o "sourceFiles/iset64test.o" "../sourceFiles/iset64test.cpp"
Finished building: ../sourceFiles/iset64test.cpp

Building target: iset64
Invoking: MacOS X C++ Linker
g++  -o "iset64"  ./sourceFiles/iset64.o ./sourceFiles/iset64test.o
Finished building target: iset64


14:41:30 Build Finished (took 2s.76ms)


TEST PROGRAM OUTPUT DATA

a = { }
set a after adding 5 = { 5 }
set a after adding 5 = { 5 }
set a after adding 0 and 63 = { 0, 5, 63 }
set b = { 1, 3, 6 }
set b after removing 3 = { 1, 6 }
set b after removing 3 = { 1, 6 }
set b after removing 10 = { 1, 6 }
set b after removing 6 = { 1 }
set b after removing 1 = { }
set b after adding {10,2} = { 2, 10 }
TESTING: iset64 operator+(const iset64& a, const iset64& b)
Set a { 1, 2 }
Set b { 1, 2, 3 }
a + b = { 1, 2, 3 }
TESTING:iset64 operator+(const iset64& a, const int b)
{ 1, 2 }
{1,2} + 1 = { 1, 2 }
{ 1, 2 }
{1,2} + 3 = { 1, 2, 3 }
TESTING:iset64 operator+(const int b, const iset64& a)
Set a { 1, 2 }
 1 + {1,2} = { 1, 2 }
Set a { 1, 2 }
 3 + {1,2}  = { 1, 2, 3 }
TESTING:iset64& iset64::operator+=(const iset64& a)
Set b { 1, 2 }
Set a { 1, 3 }
 {1,2} + {1,3}  = { 1, 2, 3 }
iset64& iset64::operator+=(const int b)
Set a { 1, 2 }
 {1,2} + 3  = { 1, 2, 3 }
Set a { 1, 2 }
Set b { 3, 4 }
Set c { 7, 8 }
Set d { 1, 2, 3, 4, 5, 7, 8 }
TESTING: iset64 operator-(const iset64& a, const iset64& b)
Set a { 1, 2 }
Set b { 1, 2 }
a - b = { }
TESTING: iset64 operator-(const iset64& a, const iset64& b)
Set a { 1, 5 }
Set b { 1, 2, 3 }
a - b = { 5 }
TESTING: iset64 operator-(const iset64& a, const int b)
Set a { 1, 2 }
a - 3 = { 1, 2 }
TESTING: iset64 operator-(const int b, const iset64& a)
Set a { 1, 2 }
3 - a = { 3 }
TESTING: iset64& iset64::operator-=(const iset64& a)
Set a { 1, 3 }
Set b { 1, 2 }
b -= a = { 2 }
TESTING: iset64& iset64::operator-=(const int b)
Set a { 1, 2 }
a -= 3 = { 1, 2 }
Set a { 1, 2 }
Set b { 2, 4 }
Set c { 2, 8 }
Set d { 1, 5 }
TESTING: iset64 operator*(const iset64& a, const iset64& b)
Set a { 1, 2 }
Set b { 1, 2, 3 }
a * b = { 1, 2 }
TESTING:iset64 operator*(const iset64& a, const int b)
Set a { 1, 2 }
{1,2} * 1 = { 1 }
Set a { 1, 2 }
{1,2} * 3 = { }
TESTING:iset64 operator*(const int b, const iset64& a)
Set a { 1, 2 }
 1 * {1,2} = { 1 }
Set a { 1, 2 }
 3 * {1,2}  = { }
TESTING:iset64& iset64::operator*=(const iset64& a)
Set b { 1, 2 }
Set a { 1, 3 }
 {1,2} * {1,3}  = { 1 }
iset64& iset64::operator*=(const int b)
Set a { 1, 2 }
 {1,2} * 3  = { }
Set a { 1, 2 }
Set b { 2, 4 }
Set c { 2, 8 }
Set d { 2, 5 }
TESTING: bool operator==(const iset64& a, const iset64& b)
Set a { 1, 2 }
Set b { 1, 2 }
a == b true
{ 1, 2 }{ 2 }a == b false
TESTING: bool operator!=(const iset64& a, const iset64& b)
Set a { 1, 2 }
Set b { 1, 2 }
a != b false
Set a { 1, 2 }
Set b { 2 }
a != b true


#endif

//EOF


