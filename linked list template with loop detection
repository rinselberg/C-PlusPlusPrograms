/*----------------------------------------------------------------
file: slist.h
-----------------------------------------------------------------*/

/*----------------------------------------------------------------
This file has slist class declaration 
-----------------------------------------------------------------*/

/*----------------------------------------------------------------
All includes here
-----------------------------------------------------------------*/
#ifndef slist_H
#define slist_H

#include "../util/util.h"
#include "../darray/darray.h"

/*--------------------------------------------------------
static definition - only once at the start
Change to false, if you don't need verbose
----------------------------------------------------------*/
template <typename T>
bool darray<T>::_display = true;

/*----------------------------------------------------------------
All forward declaration
-----------------------------------------------------------------*/
template <typename T>
class node;

template <typename T>
class slist;

template <typename T>
class slist_iterator;


/*--------------------------------------------------------
typename node
----------------------------------------------------------*/
template <typename T>
class node {
public:
  node(const T& data) :_data(data), _next(nullptr){}
  ~node() {
    _next = nullptr;
  }
  T& get_data() { return _data; }
  friend class slist<T>; //slist can access nodes private part
  friend class slist_iterator<T>; //slist_iterator can access slist private part

  /* no body can copy node or equal node */
  node(const node<T>& x) = delete;
  node& operator=(const node<T>& x) = delete;

private:
  T  _data;
  node<T>* _next;
};

/*--------------------------------------------------------
typename slist iterator
----------------------------------------------------------*/
template <typename T>
class slist_iterator {
public:
  slist_iterator(node<T>* x = nullptr) :_current(x) {}
  ~slist_iterator() {}
  slist_iterator(const slist_iterator<T>& x) { _current = x._current; }
  slist_iterator& operator=(const slist_iterator<T>& x) { _current = x._current; return *this; }
  // *(itt)
  T& operator*() const{
    return (_current->_data);
  }

  //++itt 
  slist_iterator<T>& operator++() {
    _current = _current->_next;
    return *this;
  }

  //if (itt != x.end()
  bool operator!=(const slist_iterator<T>& rhs) const {
    return (_current != rhs._current);
  }
  //No body can call itt++
  slist_iterator<T> operator++(int i) = delete;
  //No body can call --itt or itt--
  slist_iterator<T>& operator--() = delete;
  slist_iterator<T> operator--(int i) = delete;

private:
  node<T>* _current;
};

/*--------------------------------------------------------
typename slist
----------------------------------------------------------*/
template <typename T>
class slist {
public:
  typedef slist_iterator<T> iterator;
  friend class slist_iterator<T>; //slist_iterator can access slist private part
  //slist(void(*pv) (T& c) = nullptr, int(*cf) (const T& c1, const T& c2) = NULnullptr);
  /*
   * I needed to change Jag's code
   */
  slist(void(*pv) (T& c) = nullptr, int(*cf) (const T& c1, const T& c2) = nullptr);
  ~slist();

  void change_functions(void(*pv) (T& c), int(*cf) (const T& c1, const T& c2));
  int size() const;
  void append(const T& data);
  void append_after(const T& p, const T& data);
  bool find(const T& data);
  bool unlink_data(const T& data);
  void reverse();
  void reverse_recur();
  void print_in_reverse_order_without_recursion() const;
  void print_in_reverse_order_with_recursion() const;

  void create_a_loop(int from, int to);
  bool detect_loop() const;
  bool display()const { return _display; }
  static void set_display(bool x) {
    darray<T>::set_display(x);
    _display = x;
  }

  /* for iterator */
  iterator begin() { return iterator(_first); }
  iterator end()  { return iterator(); }

  /* no body can copy slist or equal slist */
  slist(const slist<T>& x) = delete;
  slist& operator=(const slist<T>& x) = delete;

private:
  node<T>* _first;
  node<T>* _last;
  void(*_pntr_to_func_to_delete_data) (T& c);
  int(*_pntr_to_compare_func) (const T& c1, const T& c2);
  int _num_nodes_allocated;
  int _num_nodes_freed;
  static bool _display;

  node<T>* _create_a_node(const T& data);
  void _delete_a_node(node<T> *n);
  node<T>* _find(const T& data);
  //bool _unlink_data(const node<T>* p);
  /*
   * I needed to change Jag's code
   */
  bool _unlink_data(node<T>* p);
  void _reverse_recur(node<T>* f);
  void _get_last_and_last_but_one(node<T>*& last, node<T>*& last_but_one) const;
  void _print_in_reverse_order_with_recursion_r(node<T>* c) const;
};


#include "slist.hpp"

#endif
//EOF


/*
 * README please..!
 *
 * I wrote code that works for slist<T>::_unlink_data and slist<T>::detect_loop
 *
 * I have moved this code to the very top here.
 *
 */

/*----------------------------------------------------------------
Unlink node p from slist
-----------------------------------------------------------------*/
template <typename T>
//bool slist<T>::_unlink_data(const node<T>* f) {
/*
 * I needed to change Jag's code
 */
bool slist<T>::_unlink_data(node<T>* f) {
	bool unlinked = false;
	//WRITE YOUR CODE HERE
	assert(f);
	node<T>* nNode = f->_next;
	if (f == _first) {
		_first = nNode;
		if (f == _last) {
			_last = _first;
			assert(_last == nullptr);
		}
	} else {
		node<T>* pNode = _first;
		assert(pNode);
		while (pNode->_next != f) {
			pNode = pNode -> _next;
		}
		pNode->_next = nNode;
		if (!nNode) {
			_last = pNode;
		}
	}
	_delete_a_node(f);
	unlinked = true;
	return unlinked;
}

/*----------------------------------------------------------------
detect a loop
-----------------------------------------------------------------*/
template <typename T>
bool slist<T>::detect_loop() const {
	bool loopfound = false;
	//WRITE CODE BELOW
	/*
	 * "Floyd's Cycle-Finding Algorithm" as published in "Non-deterministic Algorithms" by Robert W. Floyd in 1967
	 * aka "The Tortoise and the Hare Algorithm"
	 * sourced from http://ostermiller.org/find_loop_singly_linked_list.html
	 */
	node<T>* tortoise = _first;
	node<T>* hare1 = _first;
	node<T>* hare2 = _first;
	while (tortoise) {
		if (hare2) {
			hare1 = hare2->_next;
		}
		if (hare1) {
			hare2 = hare1->_next;
		}
		if (!hare1 || !hare2) {
			break;

		}
		if (tortoise == hare1 || tortoise == hare2) {
			loopfound = true;
			break;

		}
		tortoise = tortoise->_next;
	}
	return loopfound;
}



/*----------------------------------------------------------------
file: slist.hpp
-----------------------------------------------------------------*/

/*----------------------------------------------------------------
This file has class definition
-----------------------------------------------------------------*/

/*----------------------------------------------------------------
Definition of routines of slist class
-----------------------------------------------------------------*/

/*----------------------------------------------------------------
slist Constructor
-----------------------------------------------------------------*/
template <typename T>
slist<T>::slist(void(*pv) (T& c), int(*cf) (const T& c1, const T& c2)) :
_first(nullptr), _last(nullptr), _pntr_to_compare_func(cf), _pntr_to_func_to_delete_data(pv),
_num_nodes_allocated(0), _num_nodes_freed(0)
{
  if (display()) {
    cout << "in slist constructor:" << endl;
  }
}

/*----------------------------------------------------------------
slist Destructor
-----------------------------------------------------------------*/
template <typename T>
slist<T>::~slist() {
  if (display()) {
    cout << "in slist destructor:" << endl;
  }
  node<T>* t = _first;
  while (t) {
    node<T>* ct = t;
    t = t->_next;
    _delete_a_node(ct);
  }
  if (_num_nodes_allocated != _num_nodes_freed) {
    assert(0);
  }
  _first = nullptr;
  _last = nullptr;
}

/*----------------------------------------------------------------
change function
-----------------------------------------------------------------*/
template <typename T>
void slist<T>::change_functions(void(*pv) (T& c), int(*cf) (const T& c1, const T& c2)) {
  _pntr_to_compare_func = cf;
  _pntr_to_func_to_delete_data = pv;
}

/*----------------------------------------------------------------
How many elements are in the list
-----------------------------------------------------------------*/
template <typename T>
int slist<T>::size() const {
  int i = 0;
  node<T> *f = _first;
  while (f) {
    i++;
    f = f->_next;
  }
  return i;
}

/*----------------------------------------------------------------
create a node in slist
-----------------------------------------------------------------*/
template <typename T>
node<T>* slist<T>::_create_a_node(const T& data){
  _num_nodes_allocated++;
  node<T>* x = new(node<T>)(data); /* if T is by value, copy const will be called for T */
  return x;
}

/*----------------------------------------------------------------
delete a node from slist
-----------------------------------------------------------------*/
template <typename T>
void slist<T>::_delete_a_node(node<T> *n){
  _num_nodes_freed++;
  if (_pntr_to_func_to_delete_data) {
    _pntr_to_func_to_delete_data(n->_data); /* Distructor of T will be called*/
  }
  delete(n);
}

/*----------------------------------------------------------------
append data to the end of the slist
-----------------------------------------------------------------*/
template <typename T>
void slist<T>::append(const T& data) {
  node<T> *c = _create_a_node(data);
  if (!_first) {
    _first = c;
  }
  else {
    _last->_next = c;
  }
  _last = c;
}

/*----------------------------------------------------------------
append data after p.
if p is not there, add data at the end
-----------------------------------------------------------------*/
template <typename T>
void append_after(const T& p, const T& data) {
	//WRITE YOUR CODE HERE
}

/*----------------------------------------------------------------
find data in the slist
-----------------------------------------------------------------*/
template <typename T>
node<T>* slist<T>::_find(const T& data){
  if (!(_pntr_to_compare_func)) {
    return NULL;
  }
  node<T> *f = _first;
  while (f) {
    if (_pntr_to_compare_func(data, f->_data) == 0) {
      return f;
    }
    f = f->_next;
  }
  return NULL;
}

/*----------------------------------------------------------------
find data in the slist
-----------------------------------------------------------------*/
template <typename T>
bool slist<T>::find(const T& data){
  node<T>* f = _find(data);
  return (f) ? true : false;
}

/*----------------------------------------------------------------
Unlink node p from slist
-----------------------------------------------------------------*/
template <typename T>
bool slist<T>::unlink_data(const T& data) {
  node<T>* f = _find(data);
  if (f) {
    return _unlink_data(f);
  }
  return false;
}

/*----------------------------------------------------------------
1->4->8->7

7->8->4->1
-----------------------------------------------------------------*/
template <typename T>
void slist<T>::reverse() {
  node<T>* c = _first;
  if (c) {
    _last = _first;
    node<T>* n = c->_next;
    while (n) {
      node<T>* t = n->_next;
      n->_next = c;
      c = n;
      n = t;
    }
    _first = c;
    _last->_next = NULL;
  }
}

/*----------------------------------------------------------------
DO NOT CHANGE ANYTHING BELOW
-----------------------------------------------------------------*/
template <typename T>
void slist<T>::_get_last_and_last_but_one(node<T>*& last, node<T>*& last_but_one) const{
  last = 0;
  last_but_one = 0;
  node<T>* c = _first;
  while (c) {
    last_but_one = last;
    last = c;
    c = c->_next;
  }
}


/*----------------------------------------------------------------
1->4->8->7

7->8->4->1
-----------------------------------------------------------------*/
template <typename T>
void slist<T>::reverse_recur() {
	//WRITE YOUR CODE HERE
	/*
	 * This is not the recursive solution.
	 * I just copied Jag's iterative code from slist<T>::reverse() as a way to run all the code of
	 *   slisttest.test_reverse()
	 * Because I have not yet put in all of my time to complete this part.
	 */
	node<T>* c = _first;
	if (c) {
		_last = _first;
		node<T>* n = c->_next;
		while (n) {
			node<T>* t = n->_next;
			n->_next = c;
			c = n;
			n = t;
		}
		_first = c;
		_last->_next = NULL;
	}
}


/*----------------------------------------------------------------
create a loop
DO NOT CHANGE ANYTHING BELOW
-----------------------------------------------------------------*/
template <typename T>
void slist<T>::create_a_loop(int from, int to) {
  int i = 0;
  node<T> *fp = NULL;
  node<T> *tp = NULL;
  node<T> *f = _first;
  while (f) {
    i++;
    if (i == from) {
      fp = f;
    }
    if (i == to) {
      tp = f;
    }
    f = f->_next;
  }
  if (fp && tp) {
    fp->_next = tp;
  }
}

/*----------------------------------------------------------------
Helper routine
-----------------------------------------------------------------*/
template <typename T>
void slist<T>::_print_in_reverse_order_with_recursion_r(node<T>* c) const{
  //WRITE YOUR CODE HERE
}

/*----------------------------------------------------------------
Print linked list in reverse order using recursion
-----------------------------------------------------------------*/
template <typename T>
void slist<T>::print_in_reverse_order_with_recursion() const{
  _print_in_reverse_order_with_recursion_r(_first);
  cout << endl;
}

/*----------------------------------------------------------------
Print linked list in reverse order without using recursion
-----------------------------------------------------------------*/
template <typename T>
void slist<T>::print_in_reverse_order_without_recursion() const{
  //WRITE YOUR CODE HERE
}

//EOF


/*----------------------------------------------------------------
file: slisttest.cpp
you require: ../util/util.cpp ../complex/complex.cpp slisttest.cpp
On linux:
g++  ../util/util.cpp ../complex/complex.cpp slisttest.cpp
valgrind a.out
-- All heap blocks were freed -- no leaks are possible
-----------------------------------------------------------------*/

/*----------------------------------------------------------------
This file test slist object
DO NOT CHANGE ANY THING IN THIS FILE.
-----------------------------------------------------------------*/

/*----------------------------------------------------------------
All includes here
-----------------------------------------------------------------*/
#include "slist.h"
#include "../complex/complex.h" 

/*--------------------------------------------------------
static definition - only once at the start
Change to false, if you don't need verbose
----------------------------------------------------------*/
template <typename T>
bool slist<T>::_display = false;

/*--------------------------------------------------------
local to this file. Change verbose = true for debugging
----------------------------------------------------------*/
static bool verbose = false;

/*----------------------------------------------------------------
printing help
-----------------------------------------------------------------*/
template <typename T>
static void print_help(const char *s, slist<T>& list) {
  cout << s;
  typename slist<T>::iterator itt = list.begin();
  while (itt != list.end()) {
    T& p = *(itt);
    cout << p << " ";
    ++itt;
  }
  cout << endl;
}

/*----------------------------------------------------------------
store int in linked list
-----------------------------------------------------------------*/
static void test_slist_of_integers(){
  const int N = 10;
  slist<int>::set_display(verbose);
  slist<int> a(NULL, int_descending_order);
  for (int i = 0; i < N; i++) {
    a.append(i);
  }
  print_help("After appending:", a);
  for (int i = 0; i < N; i = i + 2) {
    a.unlink_data(i);
  }
  print_help("After unlinking even items:", a);
  cout << "Printing linked list in reverse order using recusion\n";
  a.print_in_reverse_order_with_recursion();
  cout << "Printing linked list in reverse order without using recusion\n";
  a.print_in_reverse_order_without_recursion();
  a.reverse();
  print_help("After reverse:", a);
  a.reverse_recur();
  print_help("After reverse recursive:", a);
  bool k = a.find(1);
  if (k) {
    cout << "data 1 is there in the slist. I am going to unlink it \n";
    a.unlink_data(1);
  }
  else {
    cout << "data 1 is NOT there in the slist \n";
  }
  print_help("After unlinking data 1:", a);
  k = a.find(100);
  if (k) {
    a.unlink_data(100);
  }
  print_help("After unlinking data 100:", a);
  k = a.find(9);
  if (k) {
    a.unlink_data(9);
  }
  print_help("After unlinking data 9:", a);
}

/*----------------------------------------------------------------
store UDT in linked list
-----------------------------------------------------------------*/
static void test_slist_of_udt(){
  const int N = 10;
  slist<complex>::set_display(verbose);
  slist<complex> a(NULL, complex_larger_compare);
  complex c;
  for (int i = 0; i < N; i++) {
    c.setxy(i, i);
    a.append(c);
  }

  print_help("After appending:", a);

  for (int i = 0; i < N; i = i + 2) {
    c.setxy(i, i);
    a.unlink_data(c);
  }
  print_help("After unlinking even items:", a);
  a.reverse();
  print_help("After reverse:", a);
  a.reverse_recur();
  print_help("After reverse recursive:", a);
  c.setxy(1, 1);
  bool k = a.find(c);
  if (k) {
    cout << "data " << c << " is there in the slist. I am going to unlink it \n";
    a.unlink_data(c);
  }
  else {
    cout << "data " << c << " is NOT there in the slist \n";
  }

  print_help("After unlinking data 1+i1:", a);

  c.setxy(100, 100);
  k = a.find(c);
  if (k) {
    a.unlink_data(c);
  }
  print_help("After unlinking data 100+i100:", a);
  c.setxy(9, 9);
  k = a.find(c);
  if (k) {
    a.unlink_data(c);
  }
  print_help("After unlinking data 9+i9:", a);
}

/*----------------------------------------------------------------
store pointers to UDT in linked list
-----------------------------------------------------------------*/
static void test_slist_of_ptr_to_udt(){
  const int N = 10;
  slist<complex*>::set_display(verbose);
  slist<complex*> a(delete_complex, complex_larger_compare); 
  for (int i = 0; i < N; i++) {
    complex* c = new complex(i, i);
    a.append(c);
  }
  print_help("After appending:", a);
  complex c;
  for (int i = 0; i < N; i = i + 2) {
    c.setxy(i, i);
    a.unlink_data(&c);
  }
  print_help("After unlinking even items:", a);
  a.reverse();
  print_help("After reverse:", a);
  a.reverse_recur();
  print_help("After reverse recursive:", a);
  c.setxy(1, 1);
  bool k = a.find(&c);
  if (k) {
    cout << "data " << c << " is there in the slist. I am going to unlink it \n";
    a.unlink_data(&c);
  }
  else {
    cout << "data " << c << " is NOT there in the slist \n";
  }
  print_help("After unlinking data 1+i1 ", a);

  c.setxy(100, 100);
  k = a.find(&c);
  if (k) {
    a.unlink_data(&c);
  }
  print_help("After unlinking data 100+i100 ", a);
  c.setxy(9, 9);
  k = a.find(&c);
  if (k) {
    a.unlink_data(&c);
  }
  print_help("After unlinking data 9+i9:", a);
}

/*----------------------------------------------------------------
Detect loop
-----------------------------------------------------------------*/
static void test_loop(){
  const int N = 10;
  slist<int>::set_display(verbose);
  slist<int> a(NULL, int_descending_order);
  for (int i = 0; i < N; i++) {
    a.append(i);
  }
  print_help("After appending:", a);
  bool p = a.detect_loop();
  if (p) {
    cout << "There is a loop in the list \n";
  }
  else {
    cout << "There is NO loop in the list\n";
  }

  a.create_a_loop(7, 1);
  //print_help("After making a loop:",a) ; -- LOOP FOR EVER
  p = a.detect_loop();
  if (p) {
    cout << "There is a loop in the list \n";
  }
  else {
    cout << "There is NO loop in the list\n";
  }
  //PROGRAM WILL CRASH HERE.
}

/*----------------------------------------------------------------
Properties -> Configuration Properties -> Linker -> System -> Stack Reserve Size 100000000

Run time Without recursion = 0.005 secs
Run time Without recursion = 0.021 secs
----------------------------------------------------------------*/
static void test_reverse(){
  //const int N = 1000000 ; //Stack overflow
  const int N = 500;
  slist<int>::set_display(verbose);
  slist<int> a(NULL, int_descending_order);
  for (int i = 0; i < N; i++) {
    a.append(i);
  }
  clock_t start1 = clock();
  a.reverse();
  clock_t end1 = clock();
  cout << "Run time Without recursion = " << double(end1 - start1) / CLOCKS_PER_SEC << " secs" << endl;

  clock_t start2 = clock();
  a.reverse_recur();
  clock_t end2 = clock();
  cout << "Run time With recursion = " << double(end2 - start2) / CLOCKS_PER_SEC << " secs" << endl;

}

/*----------------------------------------------------------------
main
-----------------------------------------------------------------*/
int main() {
  complex::set_display(verbose);
  test_reverse();
  test_slist_of_integers();
  cout << "____________________________" << endl;
  test_slist_of_udt();
  cout << "____________________________" << endl;
  test_slist_of_ptr_to_udt();
  cout << "____________________________" << endl;
  if (1) { //Change to 1 to test. The program crash. But OK
    test_loop();
  }
  cout << "____________________________" << endl;
  return 0;
}

//EOF

Run time Without recursion = 6e-06 secs
Run time With recursion = 3e-06 secs
After appending:0 1 2 3 4 5 6 7 8 9 
After unlinking even items:1 3 5 7 9 
Printing linked list in reverse order using recusion

Printing linked list in reverse order without using recusion
After reverse:9 7 5 3 1 
After reverse recursive:1 3 5 7 9 
data 1 is there in the slist. I am going to unlink it 
After unlinking data 1:3 5 7 9 
After unlinking data 100:3 5 7 9 
After unlinking data 9:3 5 7 
____________________________
After appending:0+i0 1+i1 2+i2 3+i3 4+i4 5+i5 6+i6 7+i7 8+i8 9+i9 
After unlinking even items:1+i1 3+i3 5+i5 7+i7 9+i9 
After reverse:9+i9 7+i7 5+i5 3+i3 1+i1 
After reverse recursive:1+i1 3+i3 5+i5 7+i7 9+i9 
data 1+i1 is there in the slist. I am going to unlink it 
After unlinking data 1+i1:3+i3 5+i5 7+i7 9+i9 
After unlinking data 100+i100:3+i3 5+i5 7+i7 9+i9 
After unlinking data 9+i9:3+i3 5+i5 7+i7 
____________________________
After appending:0+i0 1+i1 2+i2 3+i3 4+i4 5+i5 6+i6 7+i7 8+i8 9+i9 
After unlinking even items:1+i1 3+i3 5+i5 7+i7 9+i9 
After reverse:9+i9 7+i7 5+i5 3+i3 1+i1 
After reverse recursive:1+i1 3+i3 5+i5 7+i7 9+i9 
data 1+i1 is there in the slist. I am going to unlink it 
After unlinking data 1+i1 3+i3 5+i5 7+i7 9+i9 
After unlinking data 100+i100 3+i3 5+i5 7+i7 9+i9 
After unlinking data 9+i9:3+i3 5+i5 7+i7 
____________________________
After appending:0 1 2 3 4 5 6 7 8 9 
There is NO loop in the list
There is a loop in the list 
objects(88716,0x7fff70e5e310) malloc: *** error for object 0x7f9bc0c03ab0: pointer being freed was not allocated
*** set a breakpoint in malloc_error_break to debug
